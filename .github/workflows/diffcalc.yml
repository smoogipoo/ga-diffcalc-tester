name: Difficulty Calculation

on:
  issue_comment:
    types: [ created ]
  workflow_dispatch:
    inputs:
      osu-a:
        description: "The source build of ppy/osu"
        type: string
        required: false
        default: 'https://github.com/ppy/osu'
      osu-b:
        description: "The target build of ppy/osu"
        type: string
        required: true
      ruleset:
        description: "The ruleset to process"
        type: choice
        required: true
        options:
          - osu
          - taiko
          - catch
          - mania
      converts:
        description: "Include converted beatmaps"
        type: boolean
        required: false
        default: true
      ranked-only:
        description: "Only ranked beatmaps"
        type: boolean
        required: false
        default: true
      generators:
        description: "Comma-separated list of generators (available: [sr, pp, score])"
        type: string
        required: false
        default: 'pp,sr'
      difficulty-calculator-a:
        description: "The source build of ppy/osu-difficulty-calculator"
        type: string
        required: false
        default: 'https://github.com/ppy/osu-difficulty-calculator'
      difficulty-calculator-b:
        description: "The target build of ppy/osu-difficulty-calculator"
        type: string
        required: false
        default: 'https://github.com/ppy/osu-difficulty-calculator'
      score-processor-a:
        description: "The source build of ppy/osu-queue-score-statistics"
        type: string
        required: false
        default: 'https://github.com/ppy/osu-queue-score-statistics'
      score-processor-b:
        description: "The target build of ppy/osu-queue-score-statistics"
        type: string
        required: false
        default: 'https://github.com/ppy/osu-queue-score-statistics'

permissions:
  pull-requests: write

env:
  COMMENT_TAG: execution-${{ github.run_id }}-${{ github.run_number }}-${{ github.run_attempt }}

jobs:
  create-comment:
    name: Create PR comment
    runs-on: ubuntu-latest
    steps:
      - name: Create comment
        uses: thollander/actions-comment-pull-request@v2
        if: ${{ github.event_name == 'issue_comment' && github.event.issue.pull_request && contains(github.event.comment.body, '!diffcalc') && github.event.comment.author_association == 'OWNER' }}
        with:
          comment_tag: ${{ env.COMMENT_TAG }}
          message: |
            Difficulty calculator is now running... Please wait! (Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            *This comment will update on completion*

  diffcalc:
    name: Run
    needs: create-comment
    runs-on: self-hosted
    if: ${{ github.event_name == 'workflow_dispatch' || contains(github.event.comment.body, '!diffcalc') && github.event.comment.author_association == 'OWNER' }}
    env:
      GENERATOR_DIR: '${{ github.workspace }}/diffcalc-sheet-generator'
      GENERATOR_ENV: '${{ github.workspace }}/diffcalc-sheet-generator/.env'
      GOOGLE_CREDS_FILE: '${{ github.workspace }}/diffcalc-sheet-generator/google-credentials.json'
    outputs:
      TARGET: ${{ steps.run.outputs.TARGET }}
      SPREADSHEET_LINK: ${{ steps.run.outputs.SPREADSHEET_LINK }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Checkout diffcalc-sheet-generator
        uses: actions/checkout@v3
        with:
          path: 'diffcalc-sheet-generator'
          repository: 'smoogipoo/diffcalc-sheet-generator'

      - name: Setup environment (base)
        run: |
          # Required by diffcalc-sheet-generator
          cp '${{ github.workspace }}/diffcalc-sheet-generator/.env.sample' "${GENERATOR_ENV}"

          # Add GH token
          sed -i 's/^GH_TOKEN=.*$/GH_TOKEN=${{ github.token }}/' "${GENERATOR_ENV}"

          # Add Google credentials
          echo '${{ secrets.DIFFCALC_GOOGLE_CREDENTIALS }}' | base64 -d > "${GOOGLE_CREDS_FILE}"

          # Add repository variables
          env | grep -E '^DIFFCALC_' | while read -r line; do
              opt=$(echo ${line} | cut -d '=' -f1 | cut -d '_' -f2-)
              val=$(echo ${line} | cut -d '=' -f2-)
              sed -i "s;^${opt}=.*$;${opt}=${val};" "${GENERATOR_ENV}"
          done

      - name: Setup environment (pull request)
        if: ${{ github.event_name == 'issue_comment' && github.event.issue.pull_request }}
        run: |
          sed -i "s;^OSU_B=.*$;OSU_B=${{ github.event.issue.pull_request.url }};" "${GENERATOR_ENV}"

      - name: Setup environment (comment)
        if: ${{ github.event_name == 'issue_comment' }}
        run: |
          # Add comment environment
          echo '${{ github.event.comment.body }}' | sed -r 's/\r$//' | grep -E '^\w+=' | while read -r line; do
              opt=$(echo ${line} | cut -d '=' -f1)
              sed -i "s;^${opt}=.*$;${line};" "${GENERATOR_ENV}"
          done

      - name: Setup environment (workflow dispatch)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          # Add dispatch environment
          sed -i 's;^OSU_A=.*$;OSU_A=${{ inputs.osu-a }};' "${GENERATOR_ENV}"
          sed -i 's;^OSU_B=.*$;OSU_B=${{ inputs.osu-b }};' "${GENERATOR_ENV}"
          sed -i 's/^RULESET=.*$/RULESET=${{ inputs.ruleset }}/' "${GENERATOR_ENV}"
          sed -i 's/^GENERATORS=.*$/GENERATORS=${{ inputs.generators }}/' "${GENERATOR_ENV}"
          sed -i 's;^DIFFICULTY_CALCULATOR_A=.*$;DIFFICULTY_CALCULATOR_A=${{ inputs.difficulty-calculator-a }};' "${GENERATOR_ENV}"
          sed -i 's;^DIFFICULTY_CALCULATOR_B=.*$;DIFFICULTY_CALCULATOR_B=${{ inputs.difficulty-calculator-b }};' "${GENERATOR_ENV}"
          sed -i 's;^SCORE_PROCESSOR_A=.*$;SCORE_PROCESSOR_A=${{ inputs.score-processor-a }};' "${GENERATOR_ENV}"
          sed -i 's;^SCORE_PROCESSOR_B=.*$;SCORE_PROCESSOR_B=${{ inputs.score-processor-b }};' "${GENERATOR_ENV}"
          if [[ '${{ inputs.converts }}' == 'true' ]]; then
              sed -i 's/^NO_CONVERTS=.*$/NO_CONVERTS=0/' "${GENERATOR_ENV}"
          else
              sed -i 's/^NO_CONVERTS=.*$/NO_CONVERTS=1/' "${GENERATOR_ENV}"
          fi
          if [[ '${{ inputs.ranked-only }}' == 'true' ]]; then
              sed -i 's/^RANKED_ONLY=.*$/RANKED_ONLY=1/' "${GENERATOR_ENV}"
          else
              sed -i 's/^RANKED_ONLY=.*$/RANKED_ONLY=0/' "${GENERATOR_ENV}"
          fi

      - name: Setup files
        run: |
          RULESET=$(cat ${GENERATOR_ENV} | grep -E '^RULESET=' | cut -d '=' -f2-)
          echo "Ruleset: ${RULESET}"

          PERFORMANCE_DATA_NAME=$(curl -s "https://data.ppy.sh/" | grep "performance_${RULESET}_top_1000\b" | tail -1 | awk -F "'" '{print $2}' | sed 's/\.tar\.bz2//g')
          echo "Data: ${PERFORMANCE_DATA_NAME}"

          BEATMAPS_DATA_NAME=$(curl -s "https://data.ppy.sh/" | grep "osu_files" | tail -1 | awk -F "'" '{print $2}' | sed 's/\.tar\.bz2//g')
          echo "Beatmaps: ${BEATMAPS_DATA_NAME}"

          echo "Downloading database dump ${PERFORMANCE_DATA_NAME}.."
          wget -q -nc "https://data.ppy.sh/${PERFORMANCE_DATA_NAME}.tar.bz2"
          echo 'Extracting...'
          tar -I lbzip2 -xf "${PERFORMANCE_DATA_NAME}.tar.bz2"

          rm -r "${GENERATOR_DIR}/sql/${RULESET}"
          mv "${PERFORMANCE_DATA_NAME}" "${GENERATOR_DIR}/sql/${RULESET}"

          echo "Downloading beatmap dump ${BEATMAPS_DATA_NAME}.."
          wget -q -nc "https://data.ppy.sh/${BEATMAPS_DATA_NAME}.tar.bz2"
          echo 'Extracting...'
          tar -I lbzip2 -xf "${BEATMAPS_DATA_NAME}.tar.bz2"

          rm -r "${GENERATOR_DIR}/beatmaps"
          mv "${BEATMAPS_DATA_NAME}" "${GENERATOR_DIR}/beatmaps"

      - name: Run generator
        id: run
        run: |
          cd "${GENERATOR_DIR}"

          docker-compose up --build generator

          link=$(docker-compose logs generator -n 10 | grep 'http' | sed -E 's/^.*(http.*)$/\1/')
          target=$(cat "${GENERATOR_ENV}" | grep -E '^OSU_B=' | cut -d '=' -f2-)

          echo "TARGET=${target}" >> "${GITHUB_OUTPUT}"
          echo "SPREADSHEET_LINK=${link}" >> "${GITHUB_OUTPUT}"

      - name: Shutdown
        if: ${{ always() }}
        run: |
          cd "${GENERATOR_DIR}"
          docker-compose down

      - name: Output
        if: ${{ success() }}
        env:
          TARGET: ${{ steps.run.outputs.TARGET }}
          SPREADSHEET_LINK: ${{ steps.run.outputs.SPREADSHEET_LINK }}
        run: |
          echo "Target: ${TARGET}"
          echo "Spreadsheet: ${SPREADSHEET_LINK}"

  update-comment:
    name: Update PR comment
    needs: diffcalc
    runs-on: ubuntu-latest
    if: ${{ always() && github.event_name == 'issue_comment' && github.event.issue.pull_request }}
    steps:
      - name: Update comment on success
        if: ${{ needs.diffcalc.result == 'success' }}
        uses: thollander/actions-comment-pull-request@v2
        with:
          comment_tag: ${{ env.COMMENT_TAG }}
          mode: upsert
          create_if_not_exists: false
          message: |
            Target: ${{ needs.diffcalc.outputs.TARGET }}
            Spreadsheet: ${{ needs.diffcalc.outputs.SPREADSHEET_LINK }}

      - name: Update comment on failure
        if: ${{ needs.diffcalc.result == 'failure' }}
        uses: thollander/actions-comment-pull-request@v2
        with:
          comment_tag: ${{ env.COMMENT_TAG }}
          mode: upsert
          create_if_not_exists: false
          message: |
            Difficulty calculation failed: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}